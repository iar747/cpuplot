#!/bin/sh

#################################################
# Command Line profiler of CPU usage.
#
# Displays bar graphs to the terminal depicting the Total CPU Usage Percentage
# and the Total 1 Minute Load Average Percentage.  It also shows the process
# with the highest CPU utilization.
#
# Default sleep interval between readings is 5secs. But a different one can be
# passed as an argument in the command line.
#
# Developer: Ismael Antadillas


# Default values
SECS=5
WIDTH="medium"

# Disable user typing into the terminal.  It honors "Ctrl-D".
stty -echo

echo

#################################################
# Find OS type
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     OS=Linux;;
    Darwin*)    OS=Mac;;
    CYGWIN*)    OS=Cygwin;;
    MINGW*)     OS=MinGw;;
    *)          OS="UNKNOWN:${unameOut}"
esac

#################################################
# Usage function
function usage () {
cat <<EOF
Usage: $0 -i [seconds] -w [small medium large xlarge]
where:
-i interval time in seconds between CPU readings.
-w width of the output, "small", "medium", "large", "xlarge"

As described in the man page for the "ps" command:
"The CPU utilization of the process is a decaying average over up to a
minute of previous (real) time.  Because the time base over which this
is computed varies (some processes may be very young), it is possible
for the sum of all %cpu fields to exceed 100%."

Because of the above some values for the "Total CPU Usage" may be over 100%.
When this happens, the bar plot will be truncated to 100%.

The 1 minute Load Average Percentage, is calculated dividing the 1 minute
Load Average by the number of Cores in the system.

EOF
echo
exit 0
}

#################################################
# Handling Options
while getopts ":w:i:" opt; do
	case $opt in
	w)
		if [ "$OPTARG" == "small" ] ; then
			WIDTH="$OPTARG"
		elif [ "$OPTARG" == "medium" ] ; then
			WIDTH="$OPTARG"
		elif [ "$OPTARG" == "large" ] ; then
			WIDTH="$OPTARG"
		elif [ "$OPTARG" == "xlarge" ] ; then
			WIDTH="$OPTARG"
		else
			echo "Invalid argument for width option '-w'.  Usage example:  cpuplot -w medium" >&2
			usage
		fi
	;;
	i)
		re='^[0-9]+([.][0-9]+)?$'
		if ! [[ $OPTARG =~ $re ]] ; then
			#Value is not a number or is empty.
			echo "Invalid argument for interval option '-i'. Usage example: cpuplot -i 5" >&2
			usage
		else
			SECS=$OPTARG
		fi
	;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		usage
	;;
	:)
		echo "Option -$OPTARG requires an argument." >&2
		usage
	;;
	esac
done

#################################################
#Create and print header.

if [ "$OS" == "Mac" ] ; then
	HARDWARE=$(system_profiler SPHardwareDataType)
	CORES=$( printf "%s" "$HARDWARE" | grep Cores: | cut -d' ' -f11)
	RAM=$( printf "%s" "$HARDWARE" | grep Memory: )
	RAM=$(echo "${RAM#*'Memory: '}")
else
	CORES=$(nproc --all)
	RAM=$(free -m | grep Mem: | awk '{print $2;}')
	RAM="$RAM MB"
fi

HOST=$(hostname)
USER=$(whoami)
ZONE=$(date +"%Z")

echo "Hostname: $HOST | User: $USER"
echo "OS: $OS | RAM: $RAM | Cores: $CORES | Timezone: $ZONE"
echo

#################################################
#Create colums labels string
HEADER=""

if [ "$WIDTH" == "small" ] ; then
	HEADER="0....1....2....3....4....5....6....7....8....9....1"
elif [ "$WIDTH" == "medium" ] ; then
	HEADER="TIME     COMMAND      %CPUt 0....1....2....3....4....5....6....7....8....9....1"
elif [ "$WIDTH" == "large" ] ; then
	HEADER="TIME     PID   PROCESS      %MEMp %CPUp| %MEMt %LA1m %CPUt 0....1....2....3....4....5....6....7....8....9....1"
elif [ "$WIDTH" == "xlarge" ] ; then
	HEADER="TIME     PID   PROCESS      %MEMp %CPUp| %MEMt %CPUt 0....1....2....3....4....5....6....7....8....9....1 |%LA1m 0....1....2....3....4....5....6....|....8....9....1"
fi

SLEEP_SPAN=$((SECS + 1))

#################################################
#Do until "Ctrl-c".
while true
do
	DATETIME=$(date +"%Y-%m-%d %T")

	LOADS=$(uptime)
	LOADS=$(echo "${LOADS#*": "}")

	echo "$DATETIME   Load Avg: $LOADS"
	echo "$HEADER"

	#################################################
	#Do 22 times, so it fits in the default 24 lines of a terminal screen.
	for (( i=1; i<=22; i++))
	do

		START_TIME=$SECONDS

		#Parse the command with most cpu usage.
		if [ "$OS" == "Mac" ] ; then
			#OUTSTR=$(ps -Arco  %cpu= -o pmem= -o pid= -o comm=)
			OUTSTR=$(ps -erc -o pcpu=,pmem=,pid=,comm=)
			OUTSTR="${OUTSTR:1}"  #del first char. Macos bash has one extra space in front.
		else
			OUTSTR=$(ps -e -o pcpu=,pmem=,pid=,comm= --sort -pcpu)
		fi

		###############################
		# Calculate 1 minute Load Average %
		if [ "$WIDTH" == "large" ] || [ "$WIDTH" == "xlarge" ] ; then
			LOAD1m=$(uptime)
			LOAD1m=$(echo "${LOAD1m#*": "}" | cut -d' ' -f1)
			LOADHALFp=$(awk -v a=$LOAD1m -v b=$CORES 'BEGIN { print int((a / b) * 50) }')
			LOAD1mROUNDEDp=$(($LOADHALFp * 2))
			if [ $LOADHALFp -gt 50 ] ; then
				LOADHALFp=50
			fi
		fi

		###############################
		# Extract other values
		PSFIRSTLINE=($(printf "$OUTSTR" | head -n 1))

		CMDNAME=$(echo "$OUTSTR" | head -n 1 | cut -c 17-28)
		CMDCPU=$(echo "${PSFIRSTLINE[0]}")
		CMDMEM=$(echo "${PSFIRSTLINE[1]}")
		PID=$(echo "${PSFIRSTLINE[2]}")

		TOTALS=$(printf "$OUTSTR" | awk '{cpu += $1; mem += $2} END {print cpu " " mem}')

		TIME=$(date +%T)

		MEMTOTAL=$(printf "%s" "$TOTALS" | cut -d' ' -f2)

		CPUTOTAL=$(printf "%s" "$TOTALS" | cut -d' ' -f1)
		CPUROUNDED=$(printf "%.0f" $CPUTOTAL)
		#Truncate if greater than 100%
		if [ $CPUROUNDED -gt 100 ] ; then
			CPUROUNDED=100
		fi
		CPUDIV=$(expr $CPUROUNDED / 2)

		###############################
		# Print values based on -w
		if [ "$WIDTH" == "medium" ] ; then
			printf "%s %-12s %-5s "  "$TIME" "$CMDNAME" "$CPUTOTAL"
		elif [ "$WIDTH" == "large" ] ; then
			printf "%s %-5s %-12s %-5s %-5s%s %-5s %-5s %-5s "  "$TIME" "$PID" "$CMDNAME" "$CMDMEM" "$CMDCPU" "|" "$MEMTOTAL" "$LOAD1mROUNDEDp" "$CPUTOTAL"
		elif [ "$WIDTH" == "xlarge" ] ; then
			printf "%s %-5s %-12s %-5s %-5s%s %-5s %-5s "  "$TIME" "$PID" "$CMDNAME" "$CMDMEM" "$CMDCPU" "|" "$MEMTOTAL" "$CPUTOTAL"
		fi

		##################################
		#Print Total CPU% bar
		BARCHAR="|"
		BARSTRING=""
		for (( count=0; count<=$CPUDIV; count++))
		do
			BARSTRING+=$BARCHAR
		done
		printf "%-52s" "$BARSTRING"

		##################################
		#Print 1 minute Load Average Percentage bar
		if [ "$WIDTH" == "xlarge" ] ; then
			printf "%s%-5s " "|" "$LOAD1mROUNDEDp"
			BARCHAR="|"
			BARSTRING=""
			
			for (( count=0; count<=$LOADHALFp; count++)) ; do
				if [ $count -eq 35 ] ; then
				BARCHAR="+"
				fi
				BARSTRING+=$BARCHAR
			done
			
			printf "%-51s" "$BARSTRING"
		fi

		echo

		sleep $SECS

		#Find if the system has been asleep.
		ELAPSED_TIME=$(($SECONDS - $START_TIME))
		if [ "$ELAPSED_TIME" -gt "$SLEEP_SPAN" ] ; then
			echo
			echo
			echo "ASLEEP"
			i=23   #So it exits to the main loop and prints the scale bars.
			break
		fi

	#22 lines loop done
	done

#infinite loop done
done
